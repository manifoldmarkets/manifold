-- This file is autogenerated from regen-schema.ts

CREATE TABLE IF NOT EXISTS user_portfolio_history (
  balance numeric,
  cash_balance numeric DEFAULT 0 NOT NULL,
  cash_investment_value numeric DEFAULT 0 NOT NULL,
  id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY NOT NULL,
  investment_value numeric,
  loan_total numeric,
  profit numeric,
  spice_balance numeric DEFAULT 0 NOT NULL,
  total_cash_deposits numeric DEFAULT 0 NOT NULL,
  total_deposits numeric,
  ts timestamp without time zone,
  user_id text NOT NULL
);


-- Triggers
CREATE TRIGGER user_portfolio_history_insert AFTER INSERT ON public.user_portfolio_history FOR EACH ROW EXECUTE FUNCTION update_user_portfolio_history_latest();

-- Functions
CREATE OR REPLACE FUNCTION public.update_user_portfolio_history_latest()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
begin
    insert into user_portfolio_history_latest (user_id, ts, investment_value, cash_investment_value, balance, total_deposits, total_cash_deposits, cash_balance, spice_balance, loan_total, profit, last_calculated)
    values (new.user_id, new.ts, new.investment_value, new.cash_investment_value, new.balance, new.total_deposits, new.total_cash_deposits, new.cash_balance, new.spice_balance, new.loan_total, new.profit, new.ts)
    on conflict (user_id) do update
        set ts = excluded.ts,
            investment_value = excluded.investment_value,
            cash_investment_value = excluded.cash_investment_value,
            total_deposits = excluded.total_deposits,
            total_cash_deposits = excluded.total_cash_deposits,
            balance = excluded.balance,
            cash_balance = excluded.cash_balance,
            spice_balance = excluded.spice_balance,
            loan_total = excluded.loan_total,
            profit = excluded.profit,
            last_calculated = excluded.ts
    where user_portfolio_history_latest.ts < excluded.ts;
    return new;
end;
$function$
;

-- Row Level Security
ALTER TABLE user_portfolio_history ENABLE ROW LEVEL SECURITY;
-- Policies
DROP POLICY IF EXISTS "public read" ON user_portfolio_history;
CREATE POLICY "public read" ON user_portfolio_history FOR SELECT USING (true) ;

-- Indexes
DROP INDEX IF EXISTS user_portfolio_history_pkey;
CREATE UNIQUE INDEX user_portfolio_history_pkey ON public.user_portfolio_history USING btree (id);
DROP INDEX IF EXISTS user_portfolio_history_user_ts;
CREATE INDEX user_portfolio_history_user_ts ON public.user_portfolio_history USING btree (user_id, ts DESC);

