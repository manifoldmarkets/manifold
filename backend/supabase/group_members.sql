-- This file is autogenerated from regen-schema.ts

CREATE TABLE IF NOT EXISTS group_members (
  created_time timestamp with time zone DEFAULT now(),
  group_id text NOT NULL,
  member_id text NOT NULL,
  role text DEFAULT 'member'::text NOT NULL,
  CONSTRAINT PRIMARY KEY (group_id, member_id)
);

-- Foreign Keys
ALTER TABLE group_members ADD CONSTRAINT public_group_members_group_id_fkey FOREIGN KEY (group_id) REFERENCES groups(id) ON UPDATE CASCADE;

-- Triggers
CREATE TRIGGER decrement_group BEFORE DELETE ON public.group_members FOR EACH ROW EXECUTE FUNCTION decrement_group_members();
CREATE TRIGGER increment_group AFTER INSERT ON public.group_members FOR EACH ROW EXECUTE FUNCTION increment_group_members();

-- Functions
CREATE OR REPLACE FUNCTION public.decrement_group_members()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ begin
    update groups set total_members = total_members - 1 where id = old.group_id;
    return old;
end $function$
;

CREATE OR REPLACE FUNCTION public.increment_group_members()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ begin 
    update groups set total_members = total_members + 1 where id = new.group_id;
    return new;
end $function$
;

-- Row Level Security
ALTER TABLE group_members ENABLE ROW LEVEL SECURITY;
-- Policies
DROP POLICY IF EXISTS "public read" ON group_members;
CREATE POLICY "public read" ON group_members FOR SELECT USING (true) ;

DROP POLICY IF EXISTS "user can leave" ON group_members;
CREATE POLICY "user can leave" ON group_members FOR DELETE USING ((member_id = firebase_uid())) ;

-- Indexes
DROP INDEX IF EXISTS group_members_member_id_idx;
CREATE INDEX group_members_member_id_idx ON public.group_members USING btree (member_id);
DROP INDEX IF EXISTS group_members_pkey;
CREATE UNIQUE INDEX group_members_pkey ON public.group_members USING btree (group_id, member_id);

