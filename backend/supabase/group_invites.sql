-- This file is autogenerated from regen-schema.ts

CREATE TABLE IF NOT EXISTS group_invites (
  created_time timestamp with time zone DEFAULT now() NOT NULL,
  duration interval DEFAULT '7 days'::interval,
  expire_time timestamp with time zone,
  group_id text NOT NULL,
  id text PRIMARY KEY DEFAULT random_alphanumeric(12) NOT NULL,
  is_forever boolean GENERATED ALWAYS AS (
CASE
    WHEN duration IS NULL THEN true
    ELSE false
END) STORED,
  is_max_uses_reached boolean GENERATED ALWAYS AS (
CASE
    WHEN max_uses IS NULL THEN false
    ELSE uses >= max_uses
END) STORED,
  max_uses numeric,
  uses numeric DEFAULT 0 NOT NULL
);

-- Foreign Keys
ALTER TABLE group_invites ADD CONSTRAINT public_group_invites_group_id_fkey FOREIGN KEY (group_id) REFERENCES groups(id) ON UPDATE CASCADE ON DELETE CASCADE;

-- Triggers
CREATE TRIGGER populate_group_invites_expire_time BEFORE INSERT ON public.group_invites FOR EACH ROW EXECUTE FUNCTION set_expire_time();

-- Functions
CREATE OR REPLACE FUNCTION public.set_expire_time()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
BEGIN
    IF NEW.duration IS NULL THEN
        NEW.expire_time = NULL;
    ELSE
        NEW.expire_time = NEW.created_time + NEW.duration;
    END IF;
    RETURN NEW;
END;
$function$
;

-- Row Level Security
ALTER TABLE group_invites ENABLE ROW LEVEL SECURITY;
-- Policies
DROP POLICY IF EXISTS "Enable read access for admin" ON group_invites;
CREATE POLICY "Enable read access for admin" ON group_invites FOR SELECT TO service_role USING (true) ;

-- Indexes
DROP INDEX IF EXISTS group_invites_pkey;
CREATE UNIQUE INDEX group_invites_pkey ON public.group_invites USING btree (id);

