-- This file is autogenerated from regen-schema.ts
create table if not exists
  group_invites (
    id text default random_alphanumeric (12) not null,
    group_id text not null,
    created_time timestamp with time zone default now() not null,
    duration interval default '7 days'::interval,
    is_forever boolean generated always as (
      case
        when (duration is null) then true
        else false
      end
    ) stored,
    uses numeric default 0 not null,
    max_uses numeric,
    is_max_uses_reached boolean generated always as (
      case
        when (max_uses is null) then false
        else (uses >= max_uses)
      end
    ) stored,
    expire_time timestamp with time zone
  );

-- Foreign Keys
alter table group_invites
add constraint public_group_invites_group_id_fkey foreign key (group_id) references groups (id) on update cascade on delete cascade;

-- Triggers
create trigger populate_group_invites_expire_time before insert on public.group_invites for each row
execute function set_expire_time ();

-- Functions
create
or replace function public.set_expire_time () returns trigger language plpgsql as $function$
BEGIN
    IF NEW.duration IS NULL THEN
        NEW.expire_time = NULL;
    ELSE
        NEW.expire_time = NEW.created_time + NEW.duration;
    END IF;
    RETURN NEW;
END;
$function$;

-- Policies
alter table group_invites enable row level security;

drop policy if exists "Enable read access for admin" on group_invites;

create policy "Enable read access for admin" on group_invites for
select
  to service_role using (true);

-- Indexes
drop index if exists group_invites_pkey;

create unique index group_invites_pkey on public.group_invites using btree (id);
