-- This file is autogenerated from regen-schema.ts
create or replace view
  contracts_view as
select
  contracts.id,
  (contracts.data ->> 'creatorId'::text) as creator_id,
  (contracts.data ->> 'outcomeType'::text) as outcome_type,
  ((contracts.data ->> 'createdTime'::text))::bigint as created_time,
  ((contracts.data ->> 'closeTime'::text))::bigint as close_time,
  ((contracts.data ->> 'isResolved'::text))::boolean as is_resolved,
  (contracts.data ->> 'visibility'::text) as visibility
from
  contracts;

create or replace view
  group_role as
select
  gm.member_id,
  gp.id as group_id,
  gp.name as group_name,
  gp.slug as group_slug,
  gp.creator_id,
  gp.total_members,
  users.name,
  users.username,
  (users.data ->> 'avatarUrl'::text) as avatar_url,
  gm.role,
  ts_to_millis (gm.created_time) as createdtime,
  gp.privacy_status
from
  (
    (
      group_members gm
      join groups gp on ((gp.id = gm.group_id))
    )
    join users on ((users.id = gm.member_id))
  );

create or replace view
  public_contract_bets as
select
  contract_bets.contract_id,
  contract_bets.bet_id,
  contract_bets.data,
  contract_bets.updated_time,
  contract_bets.user_id,
  contract_bets.created_time,
  contract_bets.amount,
  contract_bets.shares,
  contract_bets.outcome,
  contract_bets.prob_before,
  contract_bets.prob_after,
  contract_bets.is_ante,
  contract_bets.is_redemption,
  contract_bets.is_challenge,
  contract_bets.visibility,
  contract_bets.is_api,
  contract_bets.answer_id
from
  contract_bets
where
  (contract_bets.visibility = 'public'::text);

create or replace view
  public_contracts as
select
  contracts.id,
  contracts.data,
  contracts.slug,
  contracts.question,
  contracts.creator_id,
  contracts.visibility,
  contracts.mechanism,
  contracts.outcome_type,
  contracts.created_time,
  contracts.close_time,
  contracts.resolution_time,
  contracts.resolution_probability,
  contracts.resolution,
  contracts.popularity_score,
  contracts.question_fts,
  contracts.description_fts,
  contracts.question_nostop_fts,
  contracts.importance_score,
  contracts.deleted,
  contracts.group_slugs,
  contracts.last_updated_time,
  contracts.last_bet_time,
  contracts.last_comment_time,
  contracts.is_politics,
  contracts.freshness_score,
  contracts.conversion_score,
  contracts.view_count,
  contracts.is_spice_payout,
  contracts.unique_bettor_count,
  contracts.tier
from
  contracts
where
  (contracts.visibility = 'public'::text);

create or replace view
  user_groups as
select
  users.id,
  users.name,
  users.username,
  (users.data ->> 'avatarUrl'::text) as avatarurl,
  coalesce(user_groups.groups, '{}'::text[]) as groups
from
  (
    users
    left join (
      select
        group_members.member_id,
        array_agg(group_members.group_id) as groups
      from
        group_members
      group by
        group_members.member_id
    ) user_groups on ((users.id = user_groups.member_id))
  );

create or replace view
  user_league_info as
select
  leagues.season,
  leagues.division,
  leagues.cohort,
  leagues.user_id,
  leagues.mana_earned,
  leagues.created_time,
  leagues.mana_earned_breakdown,
  leagues.rank_snapshot,
  (
    row_number() over (
      partition by
        leagues.season,
        leagues.division,
        leagues.cohort
      order by
        leagues.mana_earned desc
    )
  )::integer as rank
from
  leagues;

create or replace view
  user_referrals as
select
  subquery.id,
  subquery.data,
  subquery.total_referrals,
  rank() over (
    order by
      subquery.total_referrals desc
  ) as rank
from
  (
    select
      referrer.id,
      referrer.data,
      count(*) as total_referrals
    from
      (
        users referred
        join users referrer on (
          (
            (referrer.data ->> 'id'::text) = (referred.data ->> 'referredByUserId'::text)
          )
        )
      )
    where
      (
        (referred.data ->> 'referredByUserId'::text) is not null
      )
    group by
      referrer.id
  ) subquery
order by
  subquery.total_referrals desc;

create or replace view
  user_referrals_profit as
select
  subquery.id,
  subquery.data,
  subquery.total_referrals,
  subquery.total_referred_profit,
  rank() over (
    order by
      subquery.total_referrals desc
  ) as rank
from
  (
    select
      referrer.id,
      referrer.data,
      count(*) as total_referrals,
      sum(
        (
          (
            (referred.data -> 'profitCached'::text) ->> 'allTime'::text
          )
        )::numeric
      ) as total_referred_profit
    from
      (
        users referred
        join users referrer on (
          (
            (referrer.data ->> 'id'::text) = (referred.data ->> 'referredByUserId'::text)
          )
        )
      )
    where
      (
        (referred.data ->> 'referredByUserId'::text) is not null
      )
    group by
      referrer.id
  ) subquery
order by
  subquery.total_referrals desc;
