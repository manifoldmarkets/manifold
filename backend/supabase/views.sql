-- This file is autogenerated from regen-schema.ts
create or replace view
  group_role as
select
  gm.member_id,
  gp.id as group_id,
  gp.name as group_name,
  gp.slug as group_slug,
  gp.creator_id,
  gp.total_members,
  users.name,
  users.username,
  (users.data ->> 'avatarUrl'::text) as avatar_url,
  gm.role,
  ts_to_millis (gm.created_time) as createdtime,
  gp.privacy_status
from
  (
    (
      group_members gm
      join groups gp on ((gp.id = gm.group_id))
    )
    join users on ((users.id = gm.member_id))
  );

create or replace view
  user_league_info as
select
  leagues.season,
  leagues.division,
  leagues.cohort,
  leagues.user_id,
  leagues.mana_earned,
  leagues.created_time,
  leagues.mana_earned_breakdown,
  leagues.rank_snapshot,
  (
    row_number() over (
      partition by
        leagues.season,
        leagues.division,
        leagues.cohort
      order by
        leagues.mana_earned desc
    )
  )::integer as rank
from
  leagues;

create or replace view
  user_referrals as
select
  subquery.id,
  subquery.data,
  subquery.total_referrals,
  rank() over (
    order by
      subquery.total_referrals desc
  ) as rank
from
  (
    select
      referrer.id,
      referrer.data,
      count(*) as total_referrals
    from
      (
        users referred
        join users referrer on (
          (
            (referrer.data ->> 'id'::text) = (referred.data ->> 'referredByUserId'::text)
          )
        )
      )
    where
      (
        (referred.data ->> 'referredByUserId'::text) is not null
      )
    group by
      referrer.id
  ) subquery
order by
  subquery.total_referrals desc;

create or replace view
  user_referrals_profit as
select
  subquery.id,
  subquery.data,
  subquery.total_referrals,
  subquery.total_referred_profit,
  rank() over (
    order by
      subquery.total_referrals desc
  ) as rank
from
  (
    select
      referrer.id,
      referrer.data,
      count(*) as total_referrals,
      sum(
        (
          (
            (referred.data -> 'profitCached'::text) ->> 'allTime'::text
          )
        )::numeric
      ) as total_referred_profit
    from
      (
        users referred
        join users referrer on (
          (
            (referrer.data ->> 'id'::text) = (referred.data ->> 'referredByUserId'::text)
          )
        )
      )
    where
      (
        (referred.data ->> 'referredByUserId'::text) is not null
      )
    group by
      referrer.id
  ) subquery
order by
  subquery.total_referrals desc;
