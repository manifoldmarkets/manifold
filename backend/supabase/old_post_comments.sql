-- This file is autogenerated from regen-schema.ts
create table if not exists
  old_post_comments (
    post_id text not null,
    comment_id text default extensions.uuid_generate_v4 () not null,
    data jsonb not null,
    fs_updated_time timestamp without time zone,
    user_id text,
    created_time timestamp with time zone default now()
  );

-- Triggers
create trigger post_comment_populate before insert
or
update on public.old_post_comments for each row
execute function post_comment_populate_cols ();

-- Functions
create
or replace function public.post_comment_populate_cols () returns trigger language plpgsql as $function$ begin
  if new.data is not null then
    new.visibility := (new.data)->>'visibility';
    new.user_id := (new.data)->>'userId';
  end if;
  return new;
end $function$;

-- Policies
alter table old_post_comments enable row level security;

drop policy if exists "auth read" on old_post_comments;

create policy "auth read" on old_post_comments to service_role for
select
  using (true);

drop policy if exists "user can insert" on old_post_comments;

create policy "user can insert" on old_post_comments for insert
with
  check (true);

-- Indexes
drop index if exists post_comments_pkey;

create unique index post_comments_pkey on public.old_post_comments using btree (post_id, comment_id);
