-- This file is autogenerated from regen-schema.ts

CREATE TABLE IF NOT EXISTS old_post_comments (
  comment_id text DEFAULT uuid_generate_v4() NOT NULL,
  created_time timestamp with time zone DEFAULT now(),
  data jsonb NOT NULL,
  fs_updated_time timestamp without time zone,
  post_id text NOT NULL,
  user_id text,
  CONSTRAINT PRIMARY KEY (post_id, comment_id)
);


-- Triggers
CREATE TRIGGER post_comment_populate BEFORE INSERT OR UPDATE ON public.old_post_comments FOR EACH ROW EXECUTE FUNCTION post_comment_populate_cols();

-- Functions
CREATE OR REPLACE FUNCTION public.post_comment_populate_cols()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$ begin
  if new.data is not null then
    new.visibility := (new.data)->>'visibility';
    new.user_id := (new.data)->>'userId';
  end if;
  return new;
end $function$
;

-- Row Level Security
ALTER TABLE old_post_comments ENABLE ROW LEVEL SECURITY;
-- Policies
DROP POLICY IF EXISTS "auth read" ON old_post_comments;
CREATE POLICY "auth read" ON old_post_comments FOR SELECT TO service_role USING (true) ;

DROP POLICY IF EXISTS "user can insert" ON old_post_comments;
CREATE POLICY "user can insert" ON old_post_comments FOR INSERT WITH CHECK (true);

-- Indexes
DROP INDEX IF EXISTS post_comments_pkey;
CREATE UNIQUE INDEX post_comments_pkey ON public.old_post_comments USING btree (post_id, comment_id);

