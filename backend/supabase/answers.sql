-- This file is autogenerated from regen-schema.ts
create table if not exists
  answers (
    id text default random_alphanumeric (12) not null,
    contract_id text,
    user_id text,
    text text,
    created_time timestamp with time zone default now(),
    pool_yes numeric,
    pool_no numeric,
    prob numeric,
    data jsonb not null,
    index integer,
    total_liquidity numeric default 0,
    subsidy_pool numeric default 0,
    text_fts tsvector generated always as (to_tsvector('english'::regconfig, text)) stored,
    prob_change_day numeric default 0,
    prob_change_week numeric default 0,
    prob_change_month numeric default 0,
    resolution_time timestamp with time zone
  );

-- Triggers
create trigger answers_populate before insert
or
update on public.answers for each row
execute function answers_populate_cols ();

-- Functions
create
or replace function public.answers_populate_cols () returns trigger language plpgsql as $function$
begin
    if new.data is not null then
        new.index := ((new.data) ->> 'index')::int;
        new.contract_id := (new.data) ->> 'contractId';
        new.user_id := (new.data) ->> 'userId';
        new.text := ((new.data) ->> 'text')::text;
        new.created_time :=
                case when new.data ? 'createdTime' then millis_to_ts(((new.data) ->> 'createdTime')::bigint) else null end;

        new.pool_yes := ((new.data) ->> 'poolYes')::numeric;
        new.pool_no := ((new.data) ->> 'poolNo')::numeric;
        new.prob := ((new.data) ->> 'prob')::numeric;
        new.total_liquidity := ((new.data) ->> 'totalLiquidity')::numeric;
        new.subsidy_pool := ((new.data) ->> 'subsidyPool')::numeric;
        new.prob_change_day := ((new.data) -> 'probChanges'->>'day')::numeric;
        new.prob_change_week := ((new.data) -> 'probChanges'->>'week')::numeric;
        new.prob_change_month := ((new.data) -> 'probChanges'->>'month')::numeric;
        new.resolution_time :=
        case when new.data ? 'resolutionTime' then millis_to_ts(((new.data) ->> 'resolutionTime')::bigint) end;
    end if;
    return new;
end
$function$;

-- Policies
alter table answers enable row level security;

drop policy if exists "public read" on answers;

create policy "public read" on answers for
select
  using (true);

-- Indexes
drop index if exists answers_pkey;

create unique index answers_pkey on public.answers using btree (id);

drop index if exists answer_contract_id;

create index answer_contract_id on public.answers using btree (contract_id);

drop index if exists answer_text_fts;

create index answer_text_fts on public.answers using gin (text_fts);
